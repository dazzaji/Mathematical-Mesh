#using System.Text
#using Goedel.Mesh
#using Goedel.Mesh.Shell
#using Goedel.Mesh.Test
#using Goedel.Protocol
#using Goedel.Command
#xclass MakeSiteDocs MakeSiteDocs


#method WebDocs CreateWeb Index
#% Web (Index);
#% UserGuide (Index);
#% Reference (Index);
#% WebKey (Index);
#% KeyReference (Index);
#% WebProfile (Index);
#% ProfileReference (Index);
#% WebSSH (Index);
#% SSHReference (Index);
#% WebBookmark (Index);
#% BookmarkReference (Index);
#% WebPassword (Index);
#% PasswordReference (Index);
#% WebNetwork (Index);
#% NetworkReference (Index);
#% WebMessage (Index);
#% MessageReference (Index);
#% WebMail (Index);
#% MailReference (Index);
#% WebHash (Index);
#% HashReference (Index);
#% WebGroup (Index);
#% GroupReference (Index);
#% WebDare (Index);
#% DareReference (Index);
#% WebContainer (Index);
#% ContainerReference (Index);
#% WebContact (Index);
#% ContactReference (Index);
#% WebCalendar (Index);
#% CalendarReference (Index);
#end method

#xfile MakeSiteDocs Web "readme.md" CreateWeb Index

## meshman Documentation

'meshman' is a command line tool that provides access to the security tools
provided by the Mathematical Mesh. Providing these capabilities in a command
line tool makes it easy to access Mesh capabilities from scripting languages,
thus enabling scripts to be written to manage existing applications using
the Mesh.

The documentation is split into two parts:

The [User Guide](Guide) describes how to use the Mesh to perform specific tasks.

The [Reference Manual](Reference) provides a detailed description of the use of
specific commands.

#end xfile

#xfile MakeSiteDocs Features "festures.md" CreateWeb Index
## Feature Requests

The following features are planned but not yet implemented:

<dl>
<dt>Hash command set</dt>
<dd>Allow processing of multiple files at once.</dd>
<dd>Support SHA3 MACs, SHA256, etc digests.</dd>
</dl>

#end xfile

#xfile MakeSiteDocs UserGuide "Guide/readme.md" CreateWeb Index
## meshman User Guide


<dl>
<dt>[`key`](key.md)</dt>
<dd>Generate secrets and nonces. Split a secret into shares and recover secret from shares</dd>
<dt>[`hash`](hash.md)</dt>
<dd>Perform Content Digest and Message Authentication Code operations on the contents of a file</dd>
<dt>[`dare`](dare.md)</dt>
<dd>Encode and decode DARE messages</dd>
<dt>[`container`](container.md)</dt>
<dd>Encode and decode DARE containers</dd>
</dl>

#end xfile



#xfile MakeSiteDocs Reference "Reference/readme.md" CreateWeb Index
## meshman Reference Manual

<dl>
<dt>[`key`](key.md)</dt>
<dd>Generate secrets and nonces. Split a secret into shares and recover secret from shares</dd>
<dt>[`hash`](hash.md)</dt>
<dd>Perform Content Digest and Message Authentication Code operations on the contents of a file</dd>
<dt>[`dare`](dare.md)</dt>
<dd>Encode and decode DARE messages</dd>
<dt>[`container`](container.md)</dt>
<dd>Encode and decode DARE containers</dd>
</dl>

## Command format

The command processor supports use of either UNIX or Windows syntax regardless
of the platform on which it is run. This allows scripts written on Unix to be
used on Windows and vice versa while allowing users to use the syntax they are 
accustomed to use on a particular machine.


## Common options

All commands (other than `help` and `about`) support the use of the 'verbose', 
'report' and 'json' options.

*'/json' 

The '/json' flag takes precedence over the /verbose and /report options which
are ignored if '/json' is specified.

Specifying the /json flag causes the command output to be presented in JSON
format.

*'/verbose' 

The '/verbose' flag takes precedence over the /report option which is ignored if
'/verbose' is specified.

*'/report' '/noreport'* 

The /report flag is set by default. If /noreport is specified, the command is
executed without any output being made to the console.

#end xfile




#method Describe DescribeCommandSet CommandSet
## #{CommandSet.Identifier}

````
#% CommandSet.Describe('/', _Output, false);
````
#end method

#method2 Describe DescribeCommandSet CommandSet DescribeCommand Command
## #{CommandSet.Identifier} #{Command.Identifier}

````
#% Command.Describe('/', _Output, false);
````
#end method2


#method ConsoleExample List<ExampleResult> exampleResults
#if (exampleResults == null) 
**Missing Example***
#% Console.WriteLine ($"Missing example!"); return;
#end if

````
#foreach (var exampleResult in exampleResults)
>#{exampleResult.Command}
#{exampleResult.ResultText}#!
#end foreach
````
#end method


#method ConsoleJSON List<ExampleResult> exampleResults
#if (exampleResults == null) 
**Missing Example***
#% Console.WriteLine ($"Missing example!"); return;
#end if
#% var exampleResult = exampleResults[0];

````
>#{exampleResult.Command} /json
#{exampleResult.ResultJSON}
````
#end method

#method ConsoleReference List<ExampleResult> exampleResults
#if (exampleResults == null) 
**Missing Example***
#% Console.WriteLine ($"Missing example!"); return;
#end if
#% var exampleResult = exampleResults[0];

````
>#{exampleResult.Command}
#{exampleResult.ResultText}#!
````

Specifying the /json option returns a result of type #{exampleResult.ResultType}:

````
>#{exampleResult.Command} /json
#{exampleResult.ResultJSON}
````
#end method

#block
#% public string ToCommand (string command) => "`" + command + "`";
#% public string ToCommand (string group, string command) => "`" + group + " " + command + "`";
#end block


#end xclass

