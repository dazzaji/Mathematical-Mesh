#using System.Text
#using Goedel.Mesh
#using Goedel.Protocol
#using Goedel.Utilities
#using Goedel.Cryptography
#using Goedel.Cryptography.Dare
#xclass ExampleGenerator ExampleGenerator


#file MeshExamplesMessageMail "Examples\\ExamplesDAREMessageMail.md" CreateExamples Example

Consider the following mail message:

~~~~
#{Example.MailMessageAsRFC822}~~~~

Existing encryption approaches require that header fields such as the subject line be encrypted 
with the body of the message or not encrypted at all. Neither approach is satisfactory.
In this example, the subject line gives away important information that the sender
probably assumed would be encrypted. But if the subject line is encrypted together with the
message body, a mail client must retrieve at least part of the message body to provide a 
'folder' view.

The following is a plaintext DARE Message in which the header fields of the mail message are 
presented as annotations: 

~~~~
#{JSONDebugWriter.Write (Example.MailMessageAsDAREPlaintext, false)}
~~~~


#end file 

#file MeshExamplesMessageEDS "Examples\\ExamplesDAREMessageEDS.md" CreateExamples Example

The encoding of the 'From' header of the previous example as a plaintext EDS is as follows:

~~~~
#{Example.EDSText}~~~~

#end file 

#file MeshExamplesMessageEncrypted "Examples\\MeshExamplesMessageEncrypted.md" CreateExamples Example

The following is an encrypted version of the message shown earlier. 
The payload and annotations have both increased in size as a result
of the block cipher padding. The header now
includes Recipients and Salt fields to enable the content to be decoded.

~~~~
#{JSONDebugWriter.Write (Example.MailMessageAsDAREEncrypted, false)}
~~~~

#end file 


#file MeshExamplesMessage "Examples\\ExamplesDAREMessage.md" CreateExamples Example

##Test Examples

In the following examples, Alice's encryption private key parameters are:

~~~~
#{JSONDebugWriter.Write (Example.DareMessageAliceKey)}
~~~~

 Alice's signature private key parameters are:

~~~~
#{JSONDebugWriter.Write (Example.SignatureAliceKey)}
~~~~

The body of the test message is the UTF8 representation of the following string:

~~~~
"#{Example.DareMessageTest1.ToUTF8()}"
~~~~

The EDS sequences, are the UTF8 representation of the following strings:

~~~~
"#{Example.DareMessageTest2.ToUTF8()}"
"#{Example.DareMessageTest3.ToUTF8()}"
~~~~

#### Plaintext Message

A plaintext message without associated EDS sequences is an empty header
followed by the message body:

~~~~
#{JSONDebugWriter.Write (Example.DAREMessageAtomic)}
~~~~

#### Plaintext Message with EDS

If a plaintext message contains EDS sequences, these are also in plaintext:

~~~~
#{JSONDebugWriter.Write (Example.MessageAtomicDS)}
~~~~

#### Encrypted Message
#% var CryptoStackEncrypt = Example.CryptoStackEncrypt;
#% var Recipient = CryptoStackEncrypt.DARERecipient;

The creator generates a master session key:

~~~~
#{CryptoStackEncrypt.MasterSecret.ToStringBase16FormatHex()}
~~~~


The creator generates an ephemeral key:

~~~~
#{JSONDebugWriter.Write (Recipient.EphemeralPrivate)}
~~~~

The key agreement value is calculated:

~~~~
#{Recipient.KeyAgreement.ToStringBase16FormatHex()}
~~~~

The key agreement value is used as the input to a HKDF key
derivation function with the info parameter 
#{DARERecipient.KDFSalt} to create the key used to wrap the master key:

~~~~
#{Recipient.EncryptionKey.ToStringBase16FormatHex()}
~~~~

The wrapped master key is:

~~~~
#{Recipient.WrappedMasterKey.ToStringBase16FormatHex()}
~~~~

This information is used to calculate the Recipient information
shown in the example below.

To encrypt a message, we first generate a unique salt value:


~~~~
#{CryptoStackEncrypt.Salt.ToStringBase16FormatHex()}
~~~~

The salt value and master key are used to generate the payload encryption
key:

~~~~
#{CryptoStackEncrypt.KeyEncrypt.ToStringBase16FormatHex()}
~~~~

Since AES is a block cipher, we also require an initializarion vector:

~~~~
#{CryptoStackEncrypt.IV.ToStringBase16FormatHex()}
~~~~

The output sequence is the encrypted bytes:

~~~~
#{Example.MessageEnc.Body.ToStringBase16FormatHex()}
~~~~

Since the message is not signed, there is no need for a trailer.
The completed message is:

~~~~
#{JSONDebugWriter.Write (Example.MessageEnc)}
~~~~

#### Signed Message

Signed messages specify the digest algorithm to be used in the header and
the signature value in the trailer. Note that the digest algorithm is not optional
since it serves as notice that a decoder should digest the payload value 
to enable signature verification.

~~~~
#{JSONDebugWriter.Write (Example.DAREMessageAtomicSign)}
~~~~

#### Signed and Encrypted Message

A signed and encrypted message is encrypted and then signed.
The signer proves knowledge of the payload plaintext by providing the
plaintext witness value.

~~~~
#{JSONDebugWriter.Write (Example.DAREMessageAtomicSignEncrypt)}
~~~~


#end file


#end xclass
